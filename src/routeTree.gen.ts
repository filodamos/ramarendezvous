/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const RepositoryIndexLazyImport = createFileRoute('/repository/')()
const RepositoriesIndexLazyImport = createFileRoute('/repositories/')()
const DashboardIndexLazyImport = createFileRoute('/dashboard/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const RepositoryIndexLazyRoute = RepositoryIndexLazyImport.update({
  id: '/repository/',
  path: '/repository/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/repository/index.lazy').then((d) => d.Route),
)

const RepositoriesIndexLazyRoute = RepositoriesIndexLazyImport.update({
  id: '/repositories/',
  path: '/repositories/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/repositories/index.lazy').then((d) => d.Route),
)

const DashboardIndexLazyRoute = DashboardIndexLazyImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/dashboard/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/repositories/': {
      id: '/repositories/'
      path: '/repositories'
      fullPath: '/repositories'
      preLoaderRoute: typeof RepositoriesIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/repository/': {
      id: '/repository/'
      path: '/repository'
      fullPath: '/repository'
      preLoaderRoute: typeof RepositoryIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardIndexLazyRoute
  '/repositories': typeof RepositoriesIndexLazyRoute
  '/repository': typeof RepositoryIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardIndexLazyRoute
  '/repositories': typeof RepositoriesIndexLazyRoute
  '/repository': typeof RepositoryIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/dashboard/': typeof DashboardIndexLazyRoute
  '/repositories/': typeof RepositoriesIndexLazyRoute
  '/repository/': typeof RepositoryIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/dashboard' | '/repositories' | '/repository'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/repositories' | '/repository'
  id: '__root__' | '/' | '/dashboard/' | '/repositories/' | '/repository/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  DashboardIndexLazyRoute: typeof DashboardIndexLazyRoute
  RepositoriesIndexLazyRoute: typeof RepositoriesIndexLazyRoute
  RepositoryIndexLazyRoute: typeof RepositoryIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DashboardIndexLazyRoute: DashboardIndexLazyRoute,
  RepositoriesIndexLazyRoute: RepositoriesIndexLazyRoute,
  RepositoryIndexLazyRoute: RepositoryIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard/",
        "/repositories/",
        "/repository/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.lazy.tsx"
    },
    "/repositories/": {
      "filePath": "repositories/index.lazy.tsx"
    },
    "/repository/": {
      "filePath": "repository/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
